import sys
import inspect # Importar inspect para obtener miembros de un m√≥dulo

# A√±ade el directorio actual al path para importar m√≥dulos locales si ayuda.py se ejecuta solo
sys.path.append('.')

# Importa los m√≥dulos de tu aplicaci√≥n.
# Aseg√∫rate de que estos m√≥dulos existen en el mismo directorio
# para que las importaciones funcionen correctamente.
try:
    import main
    import login
    import productos
    import database
except ImportError as e:
    print(f"‚ùå Error al importar un m√≥dulo dependiente en ayuda.py: {e}")
    print("Aseg√∫rate de que 'main.py', 'login.py', 'productos.py' y 'database.py' est√©n en el mismo directorio.")
    # Exit o manejar el error de forma apropiada si no se pueden importar
    sys.exit(1)


from colorama import Fore, Style, init

# Inicializar colorama para que los estilos se reseteen autom√°ticamente
init(autoreset=True)

# Diccionario para mapear nombres de m√≥dulos a sus objetos de m√≥dulo
MODULOS_APP = {
    'main': main,
    'login': login,
    'productos': productos,
    'database': database
}

def mostrar_ayuda_general(): # Esta funci√≥n muestra una gu√≠a general del uso de la aplicaci√≥n
    """
    Muestra una gu√≠a general del uso de la aplicaci√≥n.
    Explica el flujo b√°sico y las funcionalidades principales.
    """
    print(Fore.CYAN + "\n--- Gu√≠a de Uso del Sistema de Inventario ---" + Style.RESET_ALL)
    print("Este sistema te permite gestionar productos y usuarios en una base de datos local.")
    print("\n")
    print(Style.BRIGHT + Fore.GREEN + "1.  Inicio de Sesi√≥n:" + Style.RESET_ALL)
    print("    Al ejecutar 'main.py', primero acceder√°s al m√≥dulo de login.")
    print("    Puedes elegir entre dar de alta un nuevo usuario, iniciar sesi√≥n con uno existente,")
    print("    o resetear todos los usuarios para empezar de cero (¬°usa esto con precauci√≥n!).")
    print("    Las contrase√±as no se muestran mientras las escribes por seguridad.")
    print("\n")
    print(Style.BRIGHT + Fore.GREEN + "2.  Men√∫ Principal (Gesti√≥n de Productos):" + Style.RESET_ALL)
    print("    Una vez que hayas iniciado sesi√≥n exitosamente, se te presentar√° el men√∫ principal.")
    print("    Aqu√≠ podr√°s realizar todas las operaciones relacionadas con los productos:")
    print("    - ‚ûï Agregar Producto: Ingresa los detalles de un nuevo producto (nombre, descripci√≥n, cantidad, precio, categor√≠a).")
    print("    - üëÄ Ver Productos: Muestra una tabla con todos los productos registrados en tu inventario.")
    print("    - üîç Buscar Producto: Busca productos por su ID, nombre (parcial) o categor√≠a (parcial).")
    print("    - ‚úèÔ∏è Modificar Producto: Actualiza la informaci√≥n de un producto existente, identific√°ndolo por su ID.")
    print("    - üö´ Eliminar Producto: Borra un producto espec√≠fico del inventario usando su ID.")
    print("    - üìà Reporte de Stock Bajo: Genera una lista de productos cuya cantidad en stock es baja (definir√°s el l√≠mite).")
    print("    - üö™ Salir: Cierra la aplicaci√≥n de forma segura.")
    print("\n")
    print(Style.BRIGHT + Fore.GREEN + "3.  Registro de Actividad (log.txt):" + Style.RESET_ALL)
    print("    Todas las acciones importantes que realices (agregar, modificar, eliminar productos, etc.)")
    print("    quedar√°n registradas autom√°ticamente en el archivo `log.txt` para auditor√≠a.")
    print("\n")
    print(Style.BRIGHT + Fore.GREEN + "4.  Base de Datos (inventario.db):" + Style.RESET_ALL)
    print("    La aplicaci√≥n utiliza una base de datos SQLite ('inventario.db') para almacenar de forma")
    print("    persistente tanto los usuarios como los productos, asegurando que tus datos no se pierdan.")
    print(Fore.GREEN + "\n¬°Esperamos que esta gu√≠a te sea de gran utilidad para gestionar tu inventario eficientemente! - Gracias por utilizar crud2025 - ssa" + Style.RESET_ALL)

def mostrar_docstring(modulo_o_funcion):
    """
    Funci√≥n auxiliar para mostrar la docstring (documentaci√≥n) de un objeto.
    Acepta un m√≥dulo o una funci√≥n como argumento.
    """
    nombre_objeto = getattr(modulo_o_funcion, '__name__', 'Objeto Desconocido')
    doc = getattr(modulo_o_funcion, '__doc__', None)

    if doc:
        print(Fore.YELLOW + f"\n--- Documentaci√≥n de {nombre_objeto} ---" + Style.RESET_ALL)
        print(Style.DIM + doc.strip() + Style.RESET_ALL)
    else:
        print(Fore.RED + f"‚ùå No se encontr√≥ documentaci√≥n para '{nombre_objeto}'. Aseg√∫rate de que tenga una docstring." + Style.RESET_ALL)

def obtener_funciones_de_modulo(modulo):
    """
    Obtiene una lista de funciones definidas en un m√≥dulo dado,
    excluyendo las importaciones y funciones internas/privadas.
    """
    funciones = []
    for nombre, obj in inspect.getmembers(modulo):
        if inspect.isfunction(obj) and obj.__module__ == modulo.__name__:
            # Excluir funciones que no son parte "p√∫blica" del m√≥dulo
            if not nombre.startswith('_') and nombre != 'main': # 'main' es la funci√≥n principal del m√≥dulo, no una utilidad.
                funciones.append(obj) # A√±adir la funci√≥n a la lista si es p√∫blica y no es 'main'
    return sorted(funciones, key=lambda f: f.__name__) # Ordenar alfab√©ticamente

def menu_ayuda():
    """
    Presenta un men√∫ de ayuda que permite al usuario seleccionar
    qu√© secci√≥n de la documentaci√≥n desea consultar.
    """
    while True:
        print(Fore.BLUE + "\n--- Men√∫ de Ayuda ---" + Style.RESET_ALL)
        print("1. Gu√≠a general de uso de la aplicaci√≥n")
        print("2. Documentaci√≥n del m√≥dulo `main.py`")
        print("3. Documentaci√≥n del m√≥dulo `login.py`")
        print("4. Documentaci√≥n del m√≥dulo `productos.py`")
        print("5. Documentaci√≥n del m√≥dulo `database.py`")
        print("6. Ver documentaci√≥n de una funci√≥n espec√≠fica (interactivo)") 
        print("7. Volver al men√∫ principal")
        print(Fore.BLUE + "---------------------" + Style.RESET_ALL)

        opcion_str = input("üëâ Selecciona una opci√≥n (1-7): ").strip()
        opcion = None

        try:
            opcion = int(opcion_str)
        except ValueError:
            print(Fore.RED + "‚ùå Error: La opci√≥n debe ser un n√∫mero entero." + Style.RESET_ALL)
            input(Fore.YELLOW + "\nPresiona Enter para continuar..." + Style.RESET_ALL)
            continue

        if opcion == 1:
            mostrar_ayuda_general()
        elif opcion == 2:
            mostrar_docstring(main)# Mostrar la documentaci√≥n del m√≥dulo main
        elif opcion == 3:
            mostrar_docstring(login)# Mostrar la documentaci√≥n del m√≥dulo login
        elif opcion == 4:
            mostrar_docstring(productos)# Mostrar la documentaci√≥n del m√≥dulo productos
        elif opcion == 5:
            mostrar_docstring(database)# Mostrar la documentaci√≥n del m√≥dulo database
        elif opcion == 6: # L√≥gica para la selecci√≥n interactiva de funciones
            while True:
                print(Fore.CYAN + "\n--- Selecciona un M√≥dulo para ver sus funciones ---" + Style.RESET_ALL)
                modulos_ordenados = sorted(MODULOS_APP.keys())
                for i, mod_nombre in enumerate(modulos_ordenados, start=1):
                    print(f"{i}. {mod_nombre}.py")
                print(f"{len(modulos_ordenados) + 1}. Volver al men√∫ de Ayuda")

                opcion_modulo_str = input("üëâ Selecciona un m√≥dulo (n√∫mero): ").strip()
                try:
                    opcion_modulo = int(opcion_modulo_str)
                    if opcion_modulo == len(modulos_ordenados) + 1:
                        break # Salir del bucle de selecci√≥n de m√≥dulo
                    
                    if 1 <= opcion_modulo <= len(modulos_ordenados):
                        modulo_seleccionado_nombre = modulos_ordenados[opcion_modulo - 1]
                        modulo_obj = MODULOS_APP[modulo_seleccionado_nombre]
                        
                        funciones_disponibles = obtener_funciones_de_modulo(modulo_obj)
                        
                        if not funciones_disponibles:
                            print(Fore.YELLOW + f"‚ö† No se encontraron funciones documentables en '{modulo_seleccionado_nombre}.py'." + Style.RESET_ALL)
                            input(Fore.YELLOW + "\nPresiona Enter para continuar..." + Style.RESET_ALL)
                            continue

                        while True:
                            print(Fore.GREEN + f"\n--- Funciones en {modulo_seleccionado_nombre}.py ---" + Style.RESET_ALL)
                            for i, func in enumerate(funciones_disponibles, start=1):
                                print(f"{i}. {func.__name__}")
                            print(f"{len(funciones_disponibles) + 1}. Volver a la selecci√≥n de m√≥dulo")

                            opcion_funcion_str = input("üëâ Selecciona una funci√≥n (n√∫mero): ").strip()
                            try:
                                opcion_funcion = int(opcion_funcion_str)
                                if opcion_funcion == len(funciones_disponibles) + 1:
                                    break # Salir del bucle de selecci√≥n de funci√≥n
                                
                                if 1 <= opcion_funcion <= len(funciones_disponibles):
                                    funcion_seleccionada = funciones_disponibles[opcion_funcion - 1]
                                    mostrar_docstring(funcion_seleccionada)
                                else:
                                    print(Fore.RED + "‚ùå Opci√≥n de funci√≥n inv√°lida." + Style.RESET_ALL)
                            except ValueError:
                                print(Fore.RED + "‚ùå Error: La opci√≥n debe ser un n√∫mero entero." + Style.RESET_ALL)
                            input(Fore.YELLOW + "\nPresiona Enter para continuar..." + Style.RESET_ALL)
                    else:
                        print(Fore.RED + "‚ùå Opci√≥n de m√≥dulo inv√°lida." + Style.RESET_ALL)
                except ValueError:
                    print(Fore.RED + "‚ùå Error: La opci√≥n debe ser un n√∫mero entero." + Style.RESET_ALL)
                input(Fore.YELLOW + "\nPresiona Enter para continuar..." + Style.RESET_ALL)


        elif opcion == 7:
            print(Fore.YELLOW + "üîô Volviendo al men√∫ principal..." + Style.RESET_ALL)
            break
        else:
            print(Fore.RED + "‚ùå Opci√≥n inv√°lida. Por favor, selecciona un n√∫mero del 1 al 7." + Style.RESET_ALL)

        if opcion != 7: # Evita pedir Enter si ya est√° saliendo
            input(Fore.YELLOW + "\nPresiona Enter para continuar..." + Style.RESET_ALL)

if __name__ == "__main__":
    menu_ayuda()

