"""
Este m√≥dulo maneja toda la l√≥gica relacionada con la autenticaci√≥n
de usuarios, incluyendo el registro de nuevas cuentas, el inicio de sesi√≥n,
y la funcionalidad de resetear todos los usuarios del sistema.
"""

# Secci√≥n alta y login de usuarios
import getpass
from colorama import Fore, Style, init
import database # Importar el nuevo m√≥dulo de base de datos

# Inicializar colorama para que los estilos se reseteen autom√°ticamente
init(autoreset=True)

def alta_usuario():
    """
    Registra un nuevo usuario en la base de datos.
    Ahora pide repetir la contrase√±a para confirmaci√≥n.
    """
    try:
        print(Fore.CYAN + "\n--- Alta de Nuevo Usuario ---" + Style.RESET_ALL)
        nombre_usuario = input("Ingrese un nombre de usuario: ").strip()

        if not nombre_usuario:
            print(Fore.RED + "‚ùå Error: El nombre de usuario no puede estar vac√≠o." + Style.RESET_ALL)
            return

        # Bucle para pedir y confirmar la contrase√±a
        while True:
            # getpass.getpass() no muestra los caracteres escritos (por seguridad)
            contrasena = getpass.getpass("Ingrese contrase√±a (por su seguridad no se mostrara en pantalla): ").strip()
            confirmar_contrasena = getpass.getpass("Repita la contrase√±a para confirmar: ").strip()

            if not contrasena:
                print(Fore.RED + "‚ùå Error: La contrase√±a no puede estar vac√≠a. Intente de nuevo." + Style.RESET_ALL)
                continue # Vuelve a pedir las contrase√±as
            
            if contrasena == confirmar_contrasena:
                break # Las contrase√±as coinciden, sale del bucle
            else:
                print(Fore.RED + "‚ùå Error: Las contrase√±as no coinciden. Intente de nuevo." + Style.RESET_ALL)
                # El bucle continuar√° pidiendo las contrase√±as nuevamente

        # Usar la funci√≥n agregar_usuario del m√≥dulo database
        if database.agregar_usuario(nombre_usuario, contrasena):
            print(Fore.GREEN + "‚úÖ Usuario registrado con √©xito!" + Style.RESET_ALL)
        else:
            # El mensaje de error de usuario ya existente lo maneja database.agregar_usuario
            pass # No necesitamos imprimir nada aqu√≠ porque la funci√≥n de la base de datos ya lo hace

    except EOFError:
        print(Fore.RED + "‚ùå Entrada terminada inesperadamente. No se pudo leer el usuario o la contrase√±a." + Style.RESET_ALL)
    except KeyboardInterrupt:
        print(Fore.YELLOW + "\n‚ö†Ô∏è Operaci√≥n de alta de usuario cancelada por el usuario." + Style.RESET_ALL)
    except Exception as e:
        print(Fore.RED + f"‚ùå Se produjo un error inesperado durante el alta de usuario: {e}" + Style.RESET_ALL)

def iniciar_sesion():
    """
    Permite a un usuario iniciar sesi√≥n usando la base de datos y retorna el nombre del usuario si es exitoso.
    """
    try:
        print(Fore.CYAN + "\n--- Inicio de Sesi√≥n ---" + Style.RESET_ALL)
        nombre_usuario = input("Ingrese su usuario: ").strip()
        contrasena = getpass.getpass("Contrase√±a: ").strip()

        if not nombre_usuario or not contrasena:
            print(Fore.RED + "‚ùå Usuario y/o contrase√±a no pueden estar vac√≠os." + Style.RESET_ALL)
            return None

        # Usar la funci√≥n obtener_usuario del m√≥dulo database
        usuario_logueado = database.obtener_usuario(nombre_usuario, contrasena)

        if usuario_logueado:
            print(Fore.GREEN + f"üëå Bienvenid@ {usuario_logueado} üîì" + Style.RESET_ALL)
            return usuario_logueado  # Retorna el nombre del usuario
        else:
            print(Fore.RED + "‚ùå Usuario o contrase√±a incorrecta, intente nuevamente." + Style.RESET_ALL)
            return None  # Retorna None si el inicio de sesi√≥n falla
    except EOFError:
        print(Fore.RED + "‚ùå Entrada terminada inesperadamente. No se pudo leer el usuario o la contrase√±a." + Style.RESET_ALL)
        return None
    except KeyboardInterrupt:
        print(Fore.YELLOW + "\n‚ö†Ô∏è Operaci√≥n de inicio de sesi√≥n cancelada por el usuario." + Style.RESET_ALL)
        return None
    except Exception as e:
        print(Fore.RED + f"‚ùå Se produjo un error inesperado durante el inicio de sesi√≥n: {e}" + Style.RESET_ALL)
        return None

def resetear_usuarios():
    """
    Resetea la lista de usuarios vaciando la tabla de usuarios en la base de datos.
    """
    print(Fore.CYAN + "\n--- Resetear Usuarios ---" + Style.RESET_ALL)
    # Usar la funci√≥n eliminar_todos_los_usuarios del m√≥dulo database
    if database.eliminar_todos_los_usuarios():
        print(Fore.GREEN + "‚úÖ Usuarios reseteados con √©xito." + Style.RESET_ALL)
    else:
        print(Fore.RED + "‚ùå No se pudieron resetear los usuarios." + Style.RESET_ALL)

def main():
    """
    Funci√≥n principal que maneja el men√∫ de login y alta de usuarios.
    """
    # Aseg√∫rate de que las tablas de la base de datos existan al inicio.
    # Es crucial que esta llamada se haga antes de cualquier operaci√≥n de DB.
    database.crear_tablas()

    while True:
        print("‚ûñ" * 30)
        print("  ‚ú≥Ô∏è    Bienvenido al sistema de carga de productos    ‚ú≥Ô∏è")
        print("1. üï¥Ô∏è    Alta de usuario")
        print("2. ‚ñ∂Ô∏è    Iniciar sesi√≥n")
        print("3. üóëÔ∏è    Resetear usuarios")
        print("4. üö™    Salir del Login")
        print("‚ûñ" * 30)

        opcion_str = input("Selecciona opci√≥n: ").strip()
        opcion = None

        try:
            opcion = int(opcion_str)
        except ValueError:
            print(Fore.RED + "‚ùå Error: Debe ingresar un n√∫mero para la opci√≥n." + Style.RESET_ALL)
            input("\nPresione Enter para continuar...")
            continue

        try:
            if opcion == 1:
                alta_usuario()
            elif opcion == 2:
                usuario = iniciar_sesion()
                if usuario:  # Si el inicio de sesi√≥n fue exitoso
                    return usuario  # Retorna el nombre del usuario para el m√≥dulo principal
            elif opcion == 3:
                resetear_usuarios()
            elif opcion == 4:
                print(Fore.YELLOW + "üö™ Saliendo del m√≥dulo de Login." + Style.RESET_ALL)
                return None
            else:
                print(Fore.RED + "‚ùå Opci√≥n inv√°lida. Por favor, seleccione un n√∫mero entre 1 y 4." + Style.RESET_ALL)
        except Exception as e:
            print(Fore.RED + f"‚ùå Se produjo un error inesperado en el men√∫ principal del login: {e}" + Style.RESET_ALL)

        input("\nPresione Enter para continuar...")

# El bloque __name__ == "__main__" es √∫til para probar el m√≥dulo login
# de forma independiente.
if __name__ == "__main__":
    main()
