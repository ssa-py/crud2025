"""
Este es el m√≥dulo principal del Sistema de Gesti√≥n de Inventario.
Act√∫a como el punto de entrada de la aplicaci√≥n, manejando el flujo
de inicio de sesi√≥n y el men√∫ principal de operaciones CRUD sobre productos.
Tambi√©n gestiona el logging de las acciones del usuario.
"""

import datetime # Primero los m√≥dulos de la librer√≠a est√°ndar

from colorama import Fore, Style, Back, init # Luego los m√≥dulos de terceros

import database # Finalmente tus m√≥dulos locales, en orden alfab√©tico
import login
import productos
import ayuda # Importa el m√≥dulo de ayuda

# Es una buena pr√°ctica inicializar colorama en el punto de entrada principal
init(autoreset=True)
# main.py (al inicio, despu√©s de crear_tablas())


def generar_log(usuario, accion):
    """
    Genera un log de la sesi√≥n.
    """
    try:
        with open('log.txt', 'a', encoding='utf-8') as log_file: # Abre el archivo de log en modo append
            # Escribe la acci√≥n del usuario con la fecha y hora actual
            fecha_hora = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_file.write(f"Usuario: {usuario}, Fecha: {fecha_hora}, Acci√≥n: {accion}\n") #escribe la acci√≥n en el log
        # Imprime un mensaje de √©xito en la consola
        print(Fore.CYAN + f"‚úÖ Log de acci√≥n '{accion}' generado exitosamente." + Style.RESET_ALL)
    except IOError as e: # Captura errores de entrada/salida al escribir en el archivo
        print(Fore.RED + f"‚ùå Error al escribir el log: {e}" + Style.RESET_ALL)
    except Exception as e: # Captura cualquier otro error inesperado
        print(Fore.RED + f"‚ùå Ocurri√≥ un error inesperado al generar el log: {e}" + Style.RESET_ALL)

def main():
    """
    Funci√≥n principal que maneja el men√∫ de la aplicaci√≥n CRUD.
    Ahora con un men√∫ m√°s est√©tico y saludo personalizado.
    """
    # 1. Asegurarse de que las tablas de la base de datos existan al inicio de la aplicaci√≥n.
    database.crear_tablas()

     # --- Crear usuario y productos de ejemplo si la base est√° vac√≠a ---
    if not database.obtener_usuario("user_test", "user123"):
        database.agregar_usuario("user_test", "user123")

    if not database.obtener_todos_los_productos():
        database.agregar_producto("Manzana", "Manzanas rojas frescas", 100, 2.50, "Fruta")
        database.agregar_producto("Leche Entera", "Leche de vaca, 1 litro", 50, 1.80, "L√°cteo")
        database.agregar_producto("Pan Integral", "Pan de molde integral 500g", 20, 3.20, "Panaderia")
        
    # 2. Manejar el inicio de sesi√≥n
    usuario = login.main()  # Captura el nombre del usuario o None si el login falla/se cancela

    if usuario is None:
        print(Fore.YELLOW + "üö™ Saliendo de la aplicaci√≥n porque el inicio de sesi√≥n no fue exitoso o se cancel√≥." + Style.RESET_ALL)
        return # Sale de la funci√≥n main y termina el programa

    # Si el usuario es v√°lido, continuar con el men√∫ principal
    continuar = True  # Variable para controlar el bucle

    while continuar:  # Bucle para el men√∫ del CRUD
        print(Style.BRIGHT + Fore.BLUE + "\n" + "‚ïê" * 60 + Style.RESET_ALL)
        print(Style.BRIGHT + Back.CYAN + Fore.CYAN + "                                                              " + Style.RESET_ALL)
        print(Style.BRIGHT + Back.WHITE + Fore.BLACK + "        ‚òÄÔ∏è       üõí GESTI√ìN DE INVENTARIO üõí       ‚òÄÔ∏è           " + Style.RESET_ALL)
        print(Style.BRIGHT + Back.CYAN + Fore.CYAN + "                                                              " + Style.RESET_ALL)
        print(Style.BRIGHT + Fore.BLUE + "‚ïê" * 60 + Style.RESET_ALL)
        print(Fore.CYAN + "           Bienvenid@ " + Style.BRIGHT + f"{usuario}" + Style.RESET_ALL + Fore.CYAN + "!. Al sistema CrUd - V2.0 - SSA" + Style.RESET_ALL)
        print(Fore.BLUE + "‚îÄ" * 60 + Style.RESET_ALL)
        print(Fore.GREEN + "1. Agregar nuevo producto       ‚ûï" + Style.RESET_ALL)
        print(Fore.GREEN + "2. Ver todos los productos      üëÄ" + Style.RESET_ALL)
        print(Fore.GREEN + "3. Buscar producto              üîç" + Style.RESET_ALL)
        print(Fore.GREEN + "4. Eliminar producto            üö´" + Style.RESET_ALL)
        print(Fore.GREEN + "5. Modificar producto           ‚úèÔ∏è" + Style.RESET_ALL)
        print(Fore.GREEN + "6. Reporte de stock bajo        üìà" + Style.RESET_ALL)
        print(Fore.RED +   "7. Salir de la aplicaci√≥n       üö™" + Style.RESET_ALL)
        print(Fore.BLUE + "‚îÄ" * 60 + Style.RESET_ALL) 
        print(Fore.BLUE + "8. Ayuda                        ‚ùì" + Style.RESET_ALL) 
        print(Fore.BLUE + "‚îÄ" * 60 + Style.RESET_ALL) 

        opcion_str = input(Fore.MAGENTA + "üëâ Selecciona una opci√≥n (1-8): " + Style.RESET_ALL).strip() 
        opcion = None

        try:
            opcion = int(opcion_str)
        except ValueError:
            print(Fore.RED + "‚ùå Error: La opci√≥n debe ser un n√∫mero entero." + Style.RESET_ALL)
            input(Fore.YELLOW + "\nPresiona Enter para continuar...\n" + Style.RESET_ALL)
            continue

        match opcion:
            case 1:
                productos.agregar_producto() 
                generar_log(usuario, "Producto agregado")
            case 2:
                productos.ver_productos() 
                generar_log(usuario, "Productos vistos")
            case 3:
                productos.buscar_producto()
                generar_log(usuario, "Producto buscado")
            case 4:
                productos.eliminar_producto()
                generar_log(usuario, "Producto eliminado")
            case 5:
                productos.modificar_producto() 
                generar_log(usuario, "Producto modificado")
            case 6:
                productos.reporte_productos_bajo_limite()
                generar_log(usuario, "Reporte de stock bajo generado")
            case 7:
                generar_log(usuario, "Salida del sistema")
                print(Style.BRIGHT + Fore.MAGENTA + "\n‚ú®" + "‚ïê" * 58 + "‚ú®" + Style.RESET_ALL)
                print(Style.BRIGHT + Back.WHITE + Fore.BLACK + f"         ¬°Adi√≥s, {usuario}!¬°Vuelve pronto! üôã‚Äç‚ôÇÔ∏è                   " + Style.RESET_ALL)
                print(Style.BRIGHT + Fore.MAGENTA + "‚ú®" + "‚ïê" * 58 + "‚ú®\n" + Style.RESET_ALL)
                continuar = False
            case 8: 
                ayuda.menu_ayuda()
                generar_log(usuario, "Acceso a la ayuda")
            case _:
                print(Fore.RED + "‚ùå Opci√≥n Inv√°lida. Por favor, selecciona un n√∫mero del 1 al 8." + Style.RESET_ALL) 

        if continuar:
            input(Fore.YELLOW + "\nPresiona Enter para continuar...\n" + Style.RESET_ALL)

if __name__ == "__main__":
    main()
